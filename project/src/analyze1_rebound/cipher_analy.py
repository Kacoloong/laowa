AES = [
    0x63,
    0x7C,
    0x77,
    0x7B,
    0xF2,
    0x6B,
    0x6F,
    0xC5,
    0x30,
    0x01,
    0x67,
    0x2B,
    0xFE,
    0xD7,
    0xAB,
    0x76,
    0xCA,
    0x82,
    0xC9,
    0x7D,
    0xFA,
    0x59,
    0x47,
    0xF0,
    0xAD,
    0xD4,
    0xA2,
    0xAF,
    0x9C,
    0xA4,
    0x72,
    0xC0,
    0xB7,
    0xFD,
    0x93,
    0x26,
    0x36,
    0x3F,
    0xF7,
    0xCC,
    0x34,
    0xA5,
    0xE5,
    0xF1,
    0x71,
    0xD8,
    0x31,
    0x15,
    0x04,
    0xC7,
    0x23,
    0xC3,
    0x18,
    0x96,
    0x05,
    0x9A,
    0x07,
    0x12,
    0x80,
    0xE2,
    0xEB,
    0x27,
    0xB2,
    0x75,
    0x09,
    0x83,
    0x2C,
    0x1A,
    0x1B,
    0x6E,
    0x5A,
    0xA0,
    0x52,
    0x3B,
    0xD6,
    0xB3,
    0x29,
    0xE3,
    0x2F,
    0x84,
    0x53,
    0xD1,
    0x00,
    0xED,
    0x20,
    0xFC,
    0xB1,
    0x5B,
    0x6A,
    0xCB,
    0xBE,
    0x39,
    0x4A,
    0x4C,
    0x58,
    0xCF,
    0xD0,
    0xEF,
    0xAA,
    0xFB,
    0x43,
    0x4D,
    0x33,
    0x85,
    0x45,
    0xF9,
    0x02,
    0x7F,
    0x50,
    0x3C,
    0x9F,
    0xA8,
    0x51,
    0xA3,
    0x40,
    0x8F,
    0x92,
    0x9D,
    0x38,
    0xF5,
    0xBC,
    0xB6,
    0xDA,
    0x21,
    0x10,
    0xFF,
    0xF3,
    0xD2,
    0xCD,
    0x0C,
    0x13,
    0xEC,
    0x5F,
    0x97,
    0x44,
    0x17,
    0xC4,
    0xA7,
    0x7E,
    0x3D,
    0x64,
    0x5D,
    0x19,
    0x73,
    0x60,
    0x81,
    0x4F,
    0xDC,
    0x22,
    0x2A,
    0x90,
    0x88,
    0x46,
    0xEE,
    0xB8,
    0x14,
    0xDE,
    0x5E,
    0x0B,
    0xDB,
    0xE0,
    0x32,
    0x3A,
    0x0A,
    0x49,
    0x06,
    0x24,
    0x5C,
    0xC2,
    0xD3,
    0xAC,
    0x62,
    0x91,
    0x95,
    0xE4,
    0x79,
    0xE7,
    0xC8,
    0x37,
    0x6D,
    0x8D,
    0xD5,
    0x4E,
    0xA9,
    0x6C,
    0x56,
    0xF4,
    0xEA,
    0x65,
    0x7A,
    0xAE,
    0x08,
    0xBA,
    0x78,
    0x25,
    0x2E,
    0x1C,
    0xA6,
    0xB4,
    0xC6,
    0xE8,
    0xDD,
    0x74,
    0x1F,
    0x4B,
    0xBD,
    0x8B,
    0x8A,
    0x70,
    0x3E,
    0xB5,
    0x66,
    0x48,
    0x03,
    0xF6,
    0x0E,
    0x61,
    0x35,
    0x57,
    0xB9,
    0x86,
    0xC1,
    0x1D,
    0x9E,
    0xE1,
    0xF8,
    0x98,
    0x11,
    0x69,
    0xD9,
    0x8E,
    0x94,
    0x9B,
    0x1E,
    0x87,
    0xE9,
    0xCE,
    0x55,
    0x28,
    0xDF,
    0x8C,
    0xA1,
    0x89,
    0x0D,
    0xBF,
    0xE6,
    0x42,
    0x68,
    0x41,
    0x99,
    0x2D,
    0x0F,
    0xB0,
    0x54,
    0xBB,
    0x16,
]
Whirlpool = [
    0x18,
    0x23,
    0xC6,
    0xE8,
    0x87,
    0xB8,
    0x01,
    0x4F,
    0x36,
    0xA6,
    0xD2,
    0xF5,
    0x79,
    0x6F,
    0x91,
    0x52,
    0x60,
    0xBC,
    0x9B,
    0x8E,
    0xA3,
    0x0C,
    0x7B,
    0x35,
    0x1D,
    0xE0,
    0xD7,
    0xC2,
    0x2E,
    0x4B,
    0xFE,
    0x57,
    0x15,
    0x77,
    0x37,
    0xE5,
    0x9F,
    0xF0,
    0x4A,
    0xDA,
    0x58,
    0xC9,
    0x29,
    0x0A,
    0xB1,
    0xA0,
    0x6B,
    0x85,
    0xBD,
    0x5D,
    0x10,
    0xF4,
    0xCB,
    0x3E,
    0x05,
    0x67,
    0xE4,
    0x27,
    0x41,
    0x8B,
    0xA7,
    0x7D,
    0x95,
    0xD8,
    0xFB,
    0xEE,
    0x7C,
    0x66,
    0xDD,
    0x17,
    0x47,
    0x9E,
    0xCA,
    0x2D,
    0xBF,
    0x07,
    0xAD,
    0x5A,
    0x83,
    0x33,
    0x63,
    0x02,
    0xAA,
    0x71,
    0xC8,
    0x19,
    0x49,
    0xD9,
    0xF2,
    0xE3,
    0x5B,
    0x88,
    0x9A,
    0x26,
    0x32,
    0xB0,
    0xE9,
    0x0F,
    0xD5,
    0x80,
    0xBE,
    0xCD,
    0x34,
    0x48,
    0xFF,
    0x7A,
    0x90,
    0x5F,
    0x20,
    0x68,
    0x1A,
    0xAE,
    0xB4,
    0x54,
    0x93,
    0x22,
    0x64,
    0xF1,
    0x73,
    0x12,
    0x40,
    0x08,
    0xC3,
    0xEC,
    0xDB,
    0xA1,
    0x8D,
    0x3D,
    0x97,
    0x00,
    0xCF,
    0x2B,
    0x76,
    0x82,
    0xD6,
    0x1B,
    0xB5,
    0xAF,
    0x6A,
    0x50,
    0x45,
    0xF3,
    0x30,
    0xEF,
    0x3F,
    0x55,
    0xA2,
    0xEA,
    0x65,
    0xBA,
    0x2F,
    0xC0,
    0xDE,
    0x1C,
    0xFD,
    0x4D,
    0x92,
    0x75,
    0x06,
    0x8A,
    0xB2,
    0xE6,
    0x0E,
    0x1F,
    0x62,
    0xD4,
    0xA8,
    0x96,
    0xF9,
    0xC5,
    0x25,
    0x59,
    0x84,
    0x72,
    0x39,
    0x4C,
    0x5E,
    0x78,
    0x38,
    0x8C,
    0xD1,
    0xA5,
    0xE2,
    0x61,
    0xB3,
    0x21,
    0x9C,
    0x1E,
    0x43,
    0xC7,
    0xFC,
    0x04,
    0x51,
    0x99,
    0x6D,
    0x0D,
    0xFA,
    0xDF,
    0x7E,
    0x24,
    0x3B,
    0xAB,
    0xCE,
    0x11,
    0x8F,
    0x4E,
    0xB7,
    0xEB,
    0x3C,
    0x81,
    0x94,
    0xF7,
    0xB9,
    0x13,
    0x2C,
    0xD3,
    0xE7,
    0x6E,
    0xC4,
    0x03,
    0x56,
    0x44,
    0x7F,
    0xA9,
    0x2A,
    0xBB,
    0xC1,
    0x53,
    0xDC,
    0x0B,
    0x9D,
    0x6C,
    0x31,
    0x74,
    0xF6,
    0x46,
    0xAC,
    0x89,
    0x14,
    0xE1,
    0x16,
    0x3A,
    0x69,
    0x09,
    0x70,
    0xB6,
    0xD0,
    0xED,
    0xCC,
    0x42,
    0x98,
    0xA4,
    0x28,
    0x5C,
    0xF8,
    0x86,
]


class Cipher:
    def __init__(
        self,
        cipher_name,
        cipher_state,
        cipher_state_size,
        cipher_sbox,
        cipher_mds,
        cipher_shift,
        cipher_mc_mr,
        cipher_last_mix,
        cipher_key_size,
        cipher_ks=0,
    ) -> None:
        self.cipher_name = cipher_name
        self.cipher_state = cipher_state
        self.cipher_state_size = cipher_state_size
        # print(cipher_sbox)
        # print(type(cipher_sbox))
        # print(list(cipher_sbox))
        # if self.cipher_name!="AES-128":
        # tmp_sbox=[]
        self.cipher_sbox=cipher_sbox
        # for i in cipher_sbox.split(","):
        #     self.cipher_sbox.append(int(i))
        # self.cipher_sbox = tmp_sbox
        self.cipher_mds = cipher_mds
        # print(cipher_shift)
        # print(type(cipher_shift))
        # tmp_shift=[]
        self.cipher_shift=cipher_shift
        # for i in cipher_shift.split(","):
            # self.cipher_shift.append(int(i))
        # print(self.cipher_shift)
        # print(type(self.cipher_shift))
        # self.cipher_shift = cipher_shift
        self.cipher_mc_mr = cipher_mc_mr
        self.cipher_last_mix = cipher_last_mix
        self.cipher_key_size = cipher_key_size
        self.cipher_ks = cipher_ks

        self.setup_parameters()
        # print(self.cipher_mc_mr)

        self.sbox_dct = self.generate_ddt(self.cipher_sbox)
        # print(self.sbox_dct)
        self.sbox_diff_sperm = {}

    def generate_ddt(self, sbox):
        """
        生成给定 S-box 的差分分布表（DDT）

        :param sbox: 输入为一个 S-box 列表，长度应为 2^n (n 为输入的比特数)
        :return: 返回生成的差分分布表，类型为二维列表
        """
        n = len(sbox)
        ddt = [[0] * n for _ in range(n)]

        for a in range(n):
            for x in range(n):
                y = x ^ a
                output_diff = sbox[x] ^ sbox[y]
                ddt[a][output_diff] += 1

        return ddt

    def return_cipher_content(self):
        content = ""
        content += f"杂凑密码算法状态: {self.cipher_state[0]}x{self.cipher_state[1]}\n"
        content += f"杂凑密码算法状态大小: {self.cipher_state_size}-bit\n"
        content += f"杂凑密码算法S盒: {self.cipher_sbox}\n"
        content += f"杂凑密码算法MDS矩阵: {self.cipher_mds}\n"
        content += f"杂凑密码算法循环移位: {self.cipher_shift}\n"
        if self.cipher_mc_mr == 0:
            # print(self.ci)
            content += f"杂凑密码算法列混淆行移位或行混淆列移位: 列混淆行移位\n"
        else:
            content += f"杂凑密码算法列混淆行移位或行混淆列移位: 行混淆列移位\n"
        content += f"杂凑密码算法最后一轮是否包含MDS变换: {self.cipher_last_mix}\n"
        content += f"杂凑密码算法密钥生成算法:{self.cipher_ks}\n\n"
        return content

    def setup_parameters(self):
        if self.cipher_name == "AES-128":
            self.cipher_state = [4, 4]
            self.cipher_state_size = 8  # 128 bits
            self.cipher_sbox = AES
            # Assuming AES SBox object is defined somewhere
            self.cipher_mds = [
                [2, 3, 1, 1],
                [1, 2, 3, 1],
                [1, 1, 2, 3],
                [3, 1, 1, 2],
            ]  # Set your MDS matrix value
            self.cipher_shift = [0, 1, 2, 3]  # Set your shift rows value
            self.cipher_mc_mr = 0
            self.cipher_last_mix = 0
            self.cipher_key_size = 16
            self.cipher_ks = 0  # Set key schedule value
        elif self.cipher_name == "Whirlpool":
            # 设置其他密码的参数
            self.cipher_state = [8, 8]
            self.cipher_state_size = 8  # 128 bits
            self.cipher_sbox = Whirlpool
            # Assuming AES SBox object is defined somewhere
            self.cipher_mds = [
                [1, 1, 4, 1, 8, 5, 2, 9],
                [9, 1, 1, 4, 1, 8, 5, 2],
                [2, 9, 1, 1, 4, 1, 8, 5],
                [5, 2, 9, 1, 1, 4, 1, 8],
                [8, 5, 2, 9, 1, 1, 4, 1],
                [1, 8, 5, 2, 9, 1, 1, 4],
                [4, 1, 8, 5, 2, 9, 1, 1],
                [1, 4, 1, 8, 5, 2, 9, 1],
            ]  # Set your MDS matrix value
            self.cipher_shift = [0, 7, 6, 5, 4, 3, 2, 1]  # Set your shift rows value
            self.cipher_mc_mr = 1
            self.cipher_last_mix = 1
            self.cipher_key_size = 64
            self.cipher_ks = 0  # Set key schedule value

    def sbox_diffrence_sperm(self):
        """
        计算S盒的差分谱
        """
        for i in self.sbox_dct:
            for j in i:
                if j != 0 and j != 2**8:
                    if self.sbox_diff_sperm.get(j) == None:
                        self.sbox_diff_sperm[j] = 1
                    else:
                        self.sbox_diff_sperm[j] += 1
        print(self.sbox_diff_sperm)

    def average_time_of_calculate_starting_point(self):
        """
        计算找到一个起始点的平均时间复杂度
        """
        self.sbox_diffrence_sperm()
        correct_pairs = 0
        for k, v in self.sbox_diff_sperm.items():
            correct_pairs += k * v
        average_time = float(correct_pairs / ((2**self.cipher_state_size - 1) ** 2))
        return average_time


# cipher = Cipher("AES-128")
# # print(cipher.sbox_diffrence_sperm())
# print(cipher.average_time_of_calculate_starting_point())
